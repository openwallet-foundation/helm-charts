name: Helm Chart CI/CD

on:
  pull_request:
    types: [opened, synchronize]
    branches: [ main ]
    paths: [ 'charts/**' ]

jobs:
  detect-changed-chart:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed chart
        id: detect
        uses: ./.github/actions/detect-chart
    outputs:
      chart: ${{ steps.detect.outputs.chart }}

  lint-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    needs: detect-changed-chart
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Load version pins
        uses: ./.github/actions/load-pins

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/yq
            ~/.cache/helm
            ~/.npm
          key: ${{ runner.os }}-deps-${{ needs.detect-changed-chart.outputs.chart }}-${{ hashFiles('charts/${{ needs.detect-changed-chart.outputs.chart }}/**/*') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.1
        with:
          # Version sourced from hack/versions.env (HELM_VERSION)
          version: v${{ env.HELM_VERSION }}

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Build Helm Dependencies
        working-directory: ./charts
        run: |
          chart="${{ needs.detect-changed-chart.outputs.chart }}"

          # Add Helm repos from chart dependencies
          yq '.dependencies // [] | .[] | .repository' "$chart/Chart.yaml" | sort | uniq | while IFS= read -r repo; do
            if [ -n "$repo" ] && [ "$repo" != "null" ]; then
              # Normalize repo URL to a simple name
              url_no_proto="${repo#http://}"
              url_no_proto="${url_no_proto#https://}"
              name_tmp="${url_no_proto//\//_}"
              name="${name_tmp//[^a-zA-Z0-9_\-]/}"
              echo "Adding repo: $name -> $repo"
              helm repo add "$name" "$repo" || {
                echo "‚ùå Failed to add repo $repo"
                exit 1
              }
            fi
          done

          # Build Helm dependencies
          helm dependency build "$chart" || {
            echo "‚ùå Failed to build dependencies for $chart"
            exit 1
          }

      - name: Lint changed chart
        run: ct lint --charts "charts/${{ needs.detect-changed-chart.outputs.chart }}" --config .github/ct.yaml

      - name: Validate chart templates
        working-directory: ./charts
        run: |
          chart=${{ needs.detect-changed-chart.outputs.chart }}
          helm template "$chart" > /dev/null || {
            echo "‚ùå Failed to render templates for $chart"
            exit 1
          }

      - name: Create kind cluster
        uses: helm/kind-action@v1

      - name: Test install changed chart
        run: |
          ct install \
            --charts "charts/${{ needs.detect-changed-chart.outputs.chart }}" \
            --config .github/ct.yaml

      - name: Check version and appVersion bump
        working-directory: ./charts
        run: |
          chart="${{ needs.detect-changed-chart.outputs.chart }}"
          echo "Checking $chart..."

          # Check chart version bump
          compare_versions() {
            local old_version=$1 new_version=$2
            # If old_version sorts first, then new_version is greater (correct)
            if [ "$(printf '%s\n' "$old_version" "$new_version" | sort -V | head -n1)" = "$old_version" ] && [ "$old_version" != "$new_version" ]; then
              echo "‚úÖ Version bump: $old_version ‚Üí $new_version"
            else
              echo "‚ùå Version bump required: New version ($new_version) is not greater than old version ($old_version)"
              exit 1
            fi
          }
          old_version=$(git show ${{ github.event.pull_request.base.sha }}:$chart/Chart.yaml 2>/dev/null | yq '.version // "0.0.0"' || echo "0.0.0")
          new_version=$(yq '.version // "0.0.0"' $chart/Chart.yaml)
          compare_versions "$old_version" "$new_version"

          # Check appVersion bump
          old_app=$(git show ${{ github.event.pull_request.base.sha }}:$chart/Chart.yaml 2>/dev/null | yq '.appVersion // "0.0.0"' || echo "0.0.0")
          new_app=$(yq '.appVersion // "0.0.0"' $chart/Chart.yaml)
          if [[ "$old_app" == "$new_app" ]]; then
            echo "‚ö†Ô∏è Warning: appVersion for $chart is unchanged ($new_app). Not failing, but consider bumping."
          fi

      - name: Install generators (pinned)
        uses: ./.github/actions/install-generators

      - name: Install jq (pinned)
        run: |
          curl -fsSL -o /usr/local/bin/jq "https://github.com/jqlang/jq/releases/download/jq-${JQ_VERSION}/jq-linux-amd64"
          chmod +x /usr/local/bin/jq

      - name: Check README and CHANGELOG updates
        working-directory: ./charts
        run: |
          chart="${{ needs.detect-changed-chart.outputs.chart }}"

          # Store original files for comparison
          cp "$chart/README.md" "$chart/README.md.original" 2>/dev/null || touch "$chart/README.md.original"
          cp "$chart/CHANGELOG.md" "$chart/CHANGELOG.md.original" 2>/dev/null || touch "$chart/CHANGELOG.md.original"

          # Generate fresh README and CHANGELOG
          echo "üîÑ Generating fresh README for $chart..."
          npx @bitnami/readme-generator-for-helm --readme "$chart/README.md" --values "$chart/values.yaml"

          echo "üîÑ Generating fresh CHANGELOG for $chart..."
          npx conventional-changelog -p conventionalcommits -i "$chart/CHANGELOG.md" -s

          # Check if README needs to be updated
          readme_needs_update=false
          if ! diff -q "$chart/README.md.original" "$chart/README.md" >/dev/null 2>&1; then
            readme_needs_update=true
            echo "‚ùå README.md for $chart needs to be updated due to changes in values.yaml"
          fi

          # Check CHANGELOG (advisory only) - exclude documentation-only changes
          functional_changes=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} "$chart/" | grep -v -E '(README\.md|CHANGELOG\.md|\.md$|NOTES\.txt)$' || true)

          changelog_could_update=false
          if ! diff -q "$chart/CHANGELOG.md.original" "$chart/CHANGELOG.md" >/dev/null 2>&1; then
            changelog_could_update=true
          fi

          # Restore original files before reporting
          mv "$chart/README.md.original" "$chart/README.md"
          mv "$chart/CHANGELOG.md.original" "$chart/CHANGELOG.md"

          # Report results - only fail on README issues
          if [ "$readme_needs_update" = true ]; then
            echo "‚ùå README.md for $chart needs to be updated."
            echo "   The values.yaml file has @param annotations that require README regeneration."
            echo "   Please run: npx @bitnami/readme-generator-for-helm --readme $chart/README.md --values $chart/values.yaml"
            echo ""
            echo "üõ†Ô∏è  To fix this issue:"
            echo "   1. Install generator: npm install -g @bitnami/readme-generator-for-helm"
            echo "   2. Update README: npx @bitnami/readme-generator-for-helm --readme $chart/README.md --values $chart/values.yaml"
            echo "   3. Commit the updated README.md"
            echo ""
            exit 1
          else
            echo "‚úÖ README.md is up to date"
          fi

          # CHANGELOG guidance (never fails)
          if [ -z "$functional_changes" ]; then
            echo "‚úÖ Documentation-only changes detected, CHANGELOG update not required"
          elif [ "$changelog_could_update" = true ]; then
            echo "üìã Functional changes detected:"
            echo "$functional_changes" | while IFS= read -r line; do printf '  %s\n' "$line"; done
            echo ""
            echo "‚ö†Ô∏è  CHANGELOG could be updated, but this is not enforced."
            echo "   If your changes are significant (new features, bug fixes, breaking changes),"
            echo "   please consider running: npx conventional-changelog -p conventionalcommits -i $chart/CHANGELOG.md -s"
            echo ""
            echo "   üí° Skip this if you're just fixing typos, formatting, or making trivial changes."
          else
            echo "‚úÖ CHANGELOG guidance: No update needed or already up to date"
          fi

          echo "üéâ All documentation is up to date!"

      - name: Post PR comment on failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ùå **PR checks failed**

              Please check the workflow logs for specific issues. Common fixes:

              üìù **Documentation Updates Needed:**
              - If \`values.yaml\` was modified: \`npx @bitnami/readme-generator-for-helm --readme charts/CHART/README.md --values charts/CHART/values.yaml\`
              - If significant changes were made: \`npx conventional-changelog -p conventionalcommits -i charts/CHART/CHANGELOG.md -s\`

              üîß **Other Common Issues:**
              - Version bump required in Chart.yaml
              - Helm template validation errors
              - Chart linting issues

              After making fixes, commit and push the changes.`
            })

  # Former publish job removed; publishing handled in release-publish workflow after Release PR merge.
