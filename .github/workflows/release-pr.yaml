name: Generate Release PRs

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run (do not push branches or open PRs)"
        required: false
        default: "true"
        type: choice
        options: ["true", "false"]
      chart:
        description: "Optional: limit to a single chart name (adâ€‘hoc release)"
        required: false
        default: ""
        type: string
  schedule:
    - cron: '15 * * * *'
  push:
    branches: [ main ]
    paths: [ 'charts/**' ]

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      charts: ${{ steps.filter.outputs.charts }}
    if: >-
      github.event_name != 'workflow_dispatch' || github.event.inputs.chart == ''
    steps:
      - name: Checkout
        if: github.actor != 'nektos/act'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use local workspace (act)
        if: github.actor == 'nektos/act'
        run: |
          git config user.email "devnull@example.com"; git config user.name "Release Bot"
          git status --porcelain >/dev/null || true
      - name: Load pins
        uses: ./.github/actions/load-pins

      - name: List & filter charts with a bump
        id: filter
        shell: bash
        env:
          CHART_INPUT: ${{ github.event.inputs.chart }}
        run: |
          # shellcheck disable=SC2086
          if [ -n "${CHART_INPUT}" ]; then
            if [ -d "charts/${CHART_INPUT}" ]; then
              charts="${CHART_INPUT}"
              echo "Scoping to input chart: ${CHART_INPUT}"
            else
              echo "Input chart '${CHART_INPUT}' not found under charts/" >&2
              charts=""
            fi
          else
            charts="$(find charts -mindepth 1 -maxdepth 1 -type d -printf '%f\n' 2>/dev/null || true)"
          fi
          out=()
          while IFS= read -r c; do
            [ -z "$c" ] && continue
            last="$(git tag --list "${c}-*" | sort -V | tail -1 || true)"
            eval "$(hack/release/classify_commits.sh "charts/$c" "$last")"
            if [ "${BUMP_LEVEL}" != "none" ] && [ -n "${BUMP_LEVEL}" ]; then
              out+=("${c}")
            fi
          done <<< "$charts"
          if [ ${#out[@]} -eq 0 ]; then
            echo "No charts require a release bump";
          fi
          printf '%s\n' "${out[@]}" | jq -R -s -c 'split("\n") | map(select(length>0))' | tee /tmp/charts.json
          echo "charts=$(cat /tmp/charts.json)" >> "$GITHUB_OUTPUT"

  release-pr:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        chart: ${{ fromJson(needs.prepare.outputs.charts) }}
    if: >-
      github.event_name != 'workflow_dispatch' || github.event.inputs.chart == ''
    concurrency:
      group: release-pr-${{ matrix.chart }}
      cancel-in-progress: false
    env:
      DRY_RUN: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run || 'false' }}
      CHART: ${{ matrix.chart }}
    steps:
      - name: Checkout
        if: github.actor != 'nektos/act'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use local workspace (act)
        if: github.actor == 'nektos/act'
        run: |
          git config user.email "devnull@example.com"; git config user.name "Release Bot"
          git status --porcelain >/dev/null || true

  release-pr-single:
    name: release-pr (single)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.chart != ''
    concurrency:
      group: release-pr-${{ github.event.inputs.chart }}
      cancel-in-progress: false
    env:
      DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
      CHART: ${{ github.event.inputs.chart }}
    steps:
      - name: Checkout
        if: github.actor != 'nektos/act'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use local workspace (act)
        if: github.actor == 'nektos/act'
        run: |
          git config user.email "devnull@example.com"; git config user.name "Release Bot"
          git status --porcelain >/dev/null || true

      - name: Load pins
        uses: ./.github/actions/load-pins

      - name: Determine last tag
        id: lasttag
        run: |
          # shellcheck disable=SC2086
          last="$(git tag --list "${CHART}-*" | sort -V | tail -1 || true)"
          echo "last_tag=$last" >> "$GITHUB_OUTPUT"
          echo "Last tag for ${CHART}: $last"

      - name: Classify commits
        id: classify
        run: |
          # shellcheck disable=SC2086
          chmod +x hack/release/*.sh
          last_tag='${{ steps.lasttag.outputs.last_tag }}'
          current_version="$(yq '.version' "charts/${CHART}/Chart.yaml")"
          eval "$(hack/release/classify_commits.sh "charts/${CHART}" "$last_tag")"
          echo "auto_bump=$BUMP_LEVEL" >> "$GITHUB_OUTPUT"
          echo "current_version=$current_version" >> "$GITHUB_OUTPUT"

      - name: Decide bump & next version (labels override)
        id: decide
        uses: actions/github-script@v7
        env:
          AUTO_BUMP: ${{ steps.classify.outputs.auto_bump }}
          CURRENT_VERSION: ${{ steps.classify.outputs.current_version }}
          CHART: ${{ env.CHART }}
        with:
          script: |
            const fs = require('fs');
            const cp = require('child_process');
            const autoBump = process.env.AUTO_BUMP;
            const current = process.env.CURRENT_VERSION;
            const chart = process.env.CHART;
            if (!autoBump || autoBump === 'none') {
              core.setOutput('skip','true');
              fs.appendFileSync(process.env.GITHUB_WORKSPACE + '/decide.env', 'SKIP=true\n');
              return;
            }
            let labels = [];
            try {
              const { data: prs } = await github.rest.pulls.list({ owner: context.repo.owner, repo: context.repo.repo, state: 'open', base: 'main' });
              const existing = prs.find(p => p.head.ref.startsWith(`release/${chart}-v`));
              labels = existing ? existing.labels.map(l => l.name) : [];
            } catch (e) {
              core.notice('Skipping PR label override (GitHub API unavailable)');
            }
            if (labels.includes('no-release')) { core.setOutput('skip','true'); fs.appendFileSync(process.env.GITHUB_WORKSPACE + '/decide.env', 'SKIP=true\n'); return; }
            let override = '';
            if (labels.includes('bump:major')) override='major'; else if (labels.includes('bump:minor')) override='minor'; else if (labels.includes('bump:patch')) override='patch';
            const finalBump = override || autoBump;
            const next = cp.execSync(`hack/release/next_version.sh ${current} '' ${finalBump}`).toString().trim();
            core.setOutput('skip','false');
            core.setOutput('next_version', next);
            core.setOutput('final_bump', finalBump);
            fs.appendFileSync(process.env.GITHUB_WORKSPACE + '/decide.env', `SKIP=false\nNEXT_VERSION=${next}\nFINAL_BUMP=${finalBump}\n`);

      - name: Export decision outputs
        id: export
        run: |
          # shellcheck disable=SC2086
          if [ -f decide.env ]; then cat decide.env >> "$GITHUB_ENV"; else echo 'SKIP=true' >> "$GITHUB_ENV"; fi

      - name: Install generators (pinned)
        uses: ./.github/actions/install-generators

      - name: Prepare release branch
        id: prep
        run: |
          # shellcheck disable=SC2086
          if [ "${SKIP}" = "true" ]; then echo "Skip true - not preparing branch"; exit 0; fi
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"; git config user.name "Release Bot"
          next="${NEXT_VERSION}"
          branch="release/${CHART}-v${next}"
          git switch -c "$branch" || git switch "$branch"
          hack/release/update_chart_version.sh "charts/${CHART}" "$next"
          printf '{"name":"%s-chart","version":"%s"}' "${CHART}" "$next" > package.json
          npx conventional-changelog -p conventionalcommits --tag-prefix "${CHART}-" --commit-path "charts/${CHART}" -i "charts/${CHART}/CHANGELOG.md" -s || true
          rm package.json
          npx @bitnami/readme-generator-for-helm --readme "charts/${CHART}/README.md" --values "charts/${CHART}/values.yaml"
          git add "charts/${CHART}/Chart.yaml" "charts/${CHART}/CHANGELOG.md" "charts/${CHART}/README.md"
          git diff --cached --quiet && { echo "No diffs"; exit 0; }
          git commit -m "chore(${CHART}): prepare release v${next}" -m "Automated Release PR preparation"
          if [ "${DRY_RUN}" = "true" ] || [ "${GITHUB_ACTOR}" = "nektos/act" ]; then
            echo "[DRY RUN] Would push branch $branch to origin"
          else
            git push origin "$branch" --force
          fi
          echo "branch=$branch" >> "$GITHUB_OUTPUT"

      - name: Open / update PR
        if: env.DRY_RUN != 'true'
        uses: actions/github-script@v7
        env:
          NEXT_VERSION: ${{ env.NEXT_VERSION }}
          LAST_TAG: ${{ steps.lasttag.outputs.last_tag }}
          RELEASE_BRANCH: ${{ steps.prep.outputs.branch }}
          SKIP: ${{ env.SKIP }}
          CHART: ${{ env.CHART }}
        with:
          script: |
            if (process.env.SKIP === 'true' || !process.env.RELEASE_BRANCH) { core.notice('Skip true - no PR'); return; }
            const next = process.env.NEXT_VERSION;
            const branch = process.env.RELEASE_BRANCH;
            const lastTag = process.env.LAST_TAG || 'INITIAL';
            const chart = process.env.CHART;
            const { data: pulls } = await github.rest.pulls.list({ owner: context.repo.owner, repo: context.repo.repo, state: 'open' });
            const existing = pulls.find(p => p.head.ref === branch);
            const compare = `${context.payload.repository.html_url}/compare/${lastTag}...${branch}`;
            const body = `Automated Release PR for ${chart} v${next}\n\n- Chart: ${chart}\n- Next Version: ${next}\n- Compare: ${compare}\n\nLabels:\n- bump:major | bump:minor | bump:patch\n- no-release`;
            const title = `release(${chart}): v${next}`;
            if (!existing) {
              const pr = await github.rest.pulls.create({ owner: context.repo.owner, repo: context.repo.repo, head: branch, base: 'main', title, body });
              try { await github.rest.issues.addLabels({ owner: context.repo.owner, repo: context.repo.repo, issue_number: pr.data.number, labels: ['release-pr'] }); } catch(e) {}
            } else {
              await github.rest.pulls.update({ owner: context.repo.owner, repo: context.repo.repo, pull_number: existing.number, title, body });
            }

      - name: Dry-run summary
        if: env.DRY_RUN == 'true'
        run: |
          echo "[DRY RUN] Release-PR would have created/updated branch: ${RELEASE_BRANCH:-'(none)'} and opened/updated a PR for chart ${CHART}."

      - name: Load pins
        uses: ./.github/actions/load-pins

      - name: Determine last tag
        id: lasttag
        run: |
          # shellcheck disable=SC2086
          last="$(git tag --list "${CHART}-*" | sort -V | tail -1 || true)"
          echo "last_tag=$last" >> "$GITHUB_OUTPUT"
          echo "Last tag for ${CHART}: $last"

      - name: Classify commits
        id: classify
        run: |
          # shellcheck disable=SC2086
          chmod +x hack/release/*.sh
          last_tag='${{ steps.lasttag.outputs.last_tag }}'
          current_version="$(yq '.version' "charts/${CHART}/Chart.yaml")"
          eval "$(hack/release/classify_commits.sh "charts/${CHART}" "$last_tag")"
          echo "auto_bump=$BUMP_LEVEL" >> "$GITHUB_OUTPUT"
          echo "current_version=$current_version" >> "$GITHUB_OUTPUT"

      - name: Decide bump & next version (labels override)
        id: decide
        uses: actions/github-script@v7
        env:
          AUTO_BUMP: ${{ steps.classify.outputs.auto_bump }}
          CURRENT_VERSION: ${{ steps.classify.outputs.current_version }}
          CHART: ${{ env.CHART }}
        with:
          script: |
            const fs = require('fs');
            const cp = require('child_process');
            const autoBump = process.env.AUTO_BUMP;
            const current = process.env.CURRENT_VERSION;
            const chart = process.env.CHART;
            if (!autoBump || autoBump === 'none') {
              core.setOutput('skip','true');
              fs.appendFileSync(process.env.GITHUB_WORKSPACE + '/decide.env', 'SKIP=true\n');
              return;
            }
            let labels = [];
            try {
              const { data: prs } = await github.rest.pulls.list({ owner: context.repo.owner, repo: context.repo.repo, state: 'open', base: 'main' });
              const existing = prs.find(p => p.head.ref.startsWith(`release/${chart}-v`));
              labels = existing ? existing.labels.map(l => l.name) : [];
            } catch (e) {
              core.notice('Skipping PR label override (GitHub API unavailable)');
            }
            if (labels.includes('no-release')) { core.setOutput('skip','true'); fs.appendFileSync(process.env.GITHUB_WORKSPACE + '/decide.env', 'SKIP=true\n'); return; }
            let override = '';
            if (labels.includes('bump:major')) override='major'; else if (labels.includes('bump:minor')) override='minor'; else if (labels.includes('bump:patch')) override='patch';
            const finalBump = override || autoBump;
            const next = cp.execSync(`hack/release/next_version.sh ${current} '' ${finalBump}`).toString().trim();
            core.setOutput('skip','false');
            core.setOutput('next_version', next);
            core.setOutput('final_bump', finalBump);
            fs.appendFileSync(process.env.GITHUB_WORKSPACE + '/decide.env', `SKIP=false\nNEXT_VERSION=${next}\nFINAL_BUMP=${finalBump}\n`);

      - name: Export decision outputs
        id: export
        run: |
          # shellcheck disable=SC2086
          if [ -f decide.env ]; then cat decide.env >> "$GITHUB_ENV"; else echo 'SKIP=true' >> "$GITHUB_ENV"; fi

      - name: Install generators (pinned)
        uses: ./.github/actions/install-generators

      - name: Prepare release branch
        id: prep
        run: |
          # shellcheck disable=SC2086
          if [ "${SKIP}" = "true" ]; then echo "Skip true - not preparing branch"; exit 0; fi
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"; git config user.name "Release Bot"
          next="${NEXT_VERSION}"
          branch="release/${CHART}-v${next}"
          git switch -c "$branch" || git switch "$branch"
          hack/release/update_chart_version.sh "charts/${CHART}" "$next"
          printf '{"name":"%s-chart","version":"%s"}' "${CHART}" "$next" > package.json
          npx conventional-changelog -p conventionalcommits --tag-prefix "${CHART}-" --commit-path "charts/${CHART}" -i "charts/${CHART}/CHANGELOG.md" -s || true
          rm package.json
          npx @bitnami/readme-generator-for-helm --readme "charts/${CHART}/README.md" --values "charts/${CHART}/values.yaml"
          git add "charts/${CHART}/Chart.yaml" "charts/${CHART}/CHANGELOG.md" "charts/${CHART}/README.md"
          git diff --cached --quiet && { echo "No diffs"; exit 0; }
          git commit -m "chore(${CHART}): prepare release v${next}" -m "Automated Release PR preparation"
          if [ "${DRY_RUN}" = "true" ] || [ "${GITHUB_ACTOR}" = "nektos/act" ]; then
            echo "[DRY RUN] Would push branch $branch to origin"
          else
            git push origin "$branch" --force
          fi
          echo "branch=$branch" >> "$GITHUB_OUTPUT"

      - name: Open / update PR
        if: env.DRY_RUN != 'true'
        uses: actions/github-script@v7
        env:
          NEXT_VERSION: ${{ env.NEXT_VERSION }}
          LAST_TAG: ${{ steps.lasttag.outputs.last_tag }}
          RELEASE_BRANCH: ${{ steps.prep.outputs.branch }}
          SKIP: ${{ env.SKIP }}
          CHART: ${{ env.CHART }}
        with:
          script: |
            if (process.env.SKIP === 'true' || !process.env.RELEASE_BRANCH) { core.notice('Skip true - no PR'); return; }
            const next = process.env.NEXT_VERSION;
            const branch = process.env.RELEASE_BRANCH;
            const lastTag = process.env.LAST_TAG || 'INITIAL';
            const chart = process.env.CHART;
            const { data: pulls } = await github.rest.pulls.list({ owner: context.repo.owner, repo: context.repo.repo, state: 'open' });
            const existing = pulls.find(p => p.head.ref === branch);
            const compare = `${context.payload.repository.html_url}/compare/${lastTag}...${branch}`;
            const body = `Automated Release PR for ${chart} v${next}\n\n- Chart: ${chart}\n- Next Version: ${next}\n- Compare: ${compare}\n\nLabels:\n- bump:major | bump:minor | bump:patch\n- no-release`;
            const title = `release(${chart}): v${next}`;
            if (!existing) {
              const pr = await github.rest.pulls.create({ owner: context.repo.owner, repo: context.repo.repo, head: branch, base: 'main', title, body });
              try { await github.rest.issues.addLabels({ owner: context.repo.owner, repo: context.repo.repo, issue_number: pr.data.number, labels: ['release-pr'] }); } catch(e) {}
            } else {
              await github.rest.pulls.update({ owner: context.repo.owner, repo: context.repo.repo, pull_number: existing.number, title, body });
            }

      - name: Dry-run summary
        if: env.DRY_RUN == 'true'
        run: |
          echo "[DRY RUN] Release-PR would have created/updated branch: ${RELEASE_BRANCH:-'(none)'} and opened/updated a PR for chart ${CHART}."
